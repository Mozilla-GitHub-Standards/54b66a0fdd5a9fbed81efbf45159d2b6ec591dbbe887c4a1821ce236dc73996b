#!/usr/bin/env node

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

const conf = require("../etc/config"),
      crypto = require("crypto"),
      express = require("express"),
      fs = require("fs"),
      http = require("http"),
      https = require("https"),
      i18n = require('i18n-abide'),
      path = require("path"),
      routes = require("../server/routes").routes(),
      sessions = require("client-sessions"),
      util = require("util");

// TODO Add Winston
// TODO add statsd
// TODO add convict

var app,
    options = {};

// Top of repo is the current working directory
process.chdir(path.dirname(__dirname));

if (conf.use_https) {
  try {
    var privateKey = fs.readFileSync('etc/privatekey.pem').toString();
    var certificate = fs.readFileSync('etc/certificate.pem').toString();
    app = express.createServer({key: privateKey, cert: certificate});
  } catch (e) {
    console.error('You must setup etc/privatekey.pem and etc/certificate.pem');
    console.error('See docs/DEV_NOTES.md for details.');
    throw e;
  }
} else {
  app = express.createServer();
}

app.configure('development', function () {
  app.use(express.responseTime());

  app.use(express.errorHandler({ dumpExceptions: true, showStack: true }));
});
app.configure('production', function(){
  app.use(express.errorHandler());
});
app.configure(function(){
  app.set('views', path.join(__dirname, '..', 'server/views'));
  app.set('view engine', 'ejs');
  app.use(express.logger());

  //
  app.use(express.bodyParser());

  app.use(express.methodOverride());
  app.use(sessions({
    cookieName: 'session_state',
    secret: conf.session_sekrit,
    duration: 6 * 24 * 60 * 60 * 1000, // 1 day
    cookie: {
      maxAge: 14 * 24 * 60 * 60 * 1000 // 2 weeks
    }
  }));
  app.use(express.csrf());
console.log('supported_languages:',  conf.supported_languages);
  app.use(i18n.abide({
    supported_languages: conf.supported_languages,
    default_lang: conf.default_lang,
    debug_lang: conf.debug_lang,
    locale_directory: conf.locale_directory
  }));
  app.use(function (req, resp, next) {
    resp.local('csrf_token', req.session._csrf);
    next();
  });

  app.use(app.router);
  app.get('/', function (req, resp) {
    resp.send("I am the keymaster");
  });
  // Make /.well-known/browserid
  // curl -k https://dev.clortho.mozilla.org/make/.well-known/browserid > client/.well-known/browserid


  app.get('/.well-known/browserid', routes.well_known_browserid);
  app.get('/browserid/provision', routes.provision);
  app.post('/browserid/provision', routes.provision_key);
  app.get('/browserid/sign_in', routes.signin);
  app.post('/browserid/sign_in', routes.check_signin);
  app.get('/browserid/signout', routes.signout);

  var static_dir = path.join(__dirname, '..', 'client');
  app.use(express.compiler({ enable: ['less'],
                             src: './client'}
));

app.use(function (req, resp, next) {
    if ('/.well-known/browserid' === req.url) {
      resp.setHeader('Content-Type', 'application/json');
      resp.setHeader('Last-Modified', routes.well_known_last_mod);
    }
    next();
});


console.log('servering static out of ', static_dir);
app.use(express.static(static_dir));

app.use(function (req, resp, next) {
    routes.handle404(req, resp);
  });
});

// Startup
if (conf.use_https) {
  app.listen(conf.https_port);
  console.log(util.format('Listing on https://%s', conf.issuer));
} else {
  app.listen(conf.http_port);
  console.log(util.format('Listing on http://%s:%s', conf.issuer, conf.http_port));
}

console.log("I am Vinz Clortho, keymaster of Zuul. Are you Gozer the gatekeeper?");